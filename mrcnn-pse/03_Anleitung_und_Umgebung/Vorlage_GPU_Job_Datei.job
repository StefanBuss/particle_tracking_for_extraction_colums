#!/usr/bin/zsh

########################################################
##### Batch Skript fuer das Training des Mask R-CNN ####
####### Stephan Sibirtsev and Mathias Neufang ##########
########################################################

#### SBATCH EINTRAEGE ERSTELLEN ####
#### Pfade muessen entsprechend angepasst werden ####

#### Job Name ####
#SBATCH --job-name=<JobName>

#### Pfad und Name der Outputdatei der Job Durchfuehrung ####
#SBATCH --output=/home/<UserID>/.../<JobOutputFolderName>/%x_%J_output.txt

#### Laufdauer des Jobs (wird durch das Testen von Jobs auf dem GPU node ermittelt, Rechendauer pro Epoche mit Anzahl der zu trainierenden Epochen und ggf. Sicherheitsfaktor multiplizieren) ####
#SBATCH --time=0-00:00:00

#### Arbeitsspeicherbedarf pro CPU (wird durch das Testen von Jobs auf dem GPU node ermittelt, ggf. Sicherheitsfaktor draufpacken. Arbeitsspeicherbedarf hier: 5G) ####
#SBATCH --mem-per-cpu=5G

#### Arbeitsspeicherbedarf pro GPU (wird durch das Testen von Jobs auf dem GPU node ermittelt, ggf. Sicherheitsfaktor draufpacken. Arbeitsspeicherbedarf hier: 5G) ####
#SBATCH --mem-per-gpu=5G

#### Email Adresse ####
#SBATCH --mail-user=<EmailAdress>

#### Emails die erhalten werden sollen ####
#SBATCH --mail-type=ALL

#### Anzahl an tasks, die durchgefuehrt werden sollen ####
#SBATCH --ntasks=1

#### Anzahl der benoetigten GPUs pro node ####
#SBATCH --gres=gpu:1

#### TERMINAL EINTRAEGE ERSTELLEN ####
#### Pfade muessen entsprechend angepasst werden ####

#### Das Cuda Modul laden ####
module load cuda/10.0

#### Pfad in welchem sich Anaconda befindet exportieren ####
export PATH=$PATH:/home/<UserID>/anaconda3/bin

#### Umgebung aktivieren ####
source activate env_mrcnn_gpu

#### Sich in den Pfad, wo sich das droplet.py Skript befindet navigieren ####
cd /home/<UserID>/.../ Mask_R_CNN/samples/droplet/

#### Das droplet.py Skript ausfuehren ####
python train_droplet.py --dataset_path=<TrainValidationFolderName> --name_result_file=<ExcelFileName> --new_weights_path=<WeightsFolderName> --base_weights=coco --image_max=<MaxImageSize> --masks=0 --device=1 --images_gpu=<NumberImages> --early_stopping=0 --epochs=<NumberEpochs> --dataset_quantity=<QuantityDataset> --k_fold=<NumberFolds> --k_fold_val=<FoldNumber>